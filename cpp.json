	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	{
		// DECLARE CLASS IN CANONICAL FORM HPP ------------------------------------------------------------------------------------------------//
			"Canonical form class hpp" : {
				"prefix" : "canonical_hpp",
				"body" : [
					"class $TM_FILENAME_BASE",
					"{",
					"\tprivate:",
					"\t\t$1",
					"\tpublic:",
					"\t\t$TM_FILENAME_BASE();",
					"\t\t$TM_FILENAME_BASE($TM_FILENAME_BASE const &src);",
					"\t\t~$TM_FILENAME_BASE();",
					"",
					"\t\t$TM_FILENAME_BASE &operator=($TM_FILENAME_BASE const &rhs);",
					"};",
					"",
					"std::ostream\t&operator<<(std::ostream &o, $TM_FILENAME_BASE const &i);",
				],
				"description" : "Template to initialize a class in its canonical form"
			},
		//-------------------------------------------------------------------------------------------------------------------------------------//
		
		// DECLARE CLASS IN CANONICAL FORM CPP ------------------------------------------------------------------------------------------------//
		"Canonical form class cpp" : {
			"prefix" : "canonical_cpp",
			"body" : [
				"#include \"$TM_FILENAME_BASE.hpp\"",
				"",
				"/* ************************************************************************** */",
				"/*                        CONSTRUCTORS / DESTRUCTORS                          */",
				"/* ************************************************************************** */",
				"",
				"$TM_FILENAME_BASE::$TM_FILENAME_BASE()",
				"{",
				"\treturn ;",
				"}",
				"",
				"$TM_FILENAME_BASE::$TM_FILENAME_BASE($TM_FILENAME_BASE const &src)",
				"{",
				"\t*this = src;",
				"\treturn ;",
				"}",
				"",
				"$TM_FILENAME_BASE::~$TM_FILENAME_BASE()",
				"{",
				"\treturn ;",
				"}",
				"",
				"/* ************************************************************************** */",
				"/*                            OPERATORS OVERLOAD                              */",
				"/* ************************************************************************** */",
				"",
				"$TM_FILENAME_BASE\t&$TM_FILENAME_BASE::operator=($TM_FILENAME_BASE const &rhs)",
				"{",
				"\treturn (*this);",
				"}",
				"",
				"/* ************************************************************************** */",
				"/*                             MEMBER FUNCTIONS                               */",
				"/* ************************************************************************** */",
				"",
				"",
				"",
				"/* ************************************************************************** */",
				"/*                             GETTERS / SETTERS                              */",
				"/* ************************************************************************** */",
				"",
				"",
				"",
				"/* ************************************************************************** */",
				"/*                            NON MEMBER OVERLOAD                             */",
				"/* ************************************************************************** */",
				"",
				"std::ostream\t&operator<<(std::ostream &o, $TM_FILENAME_BASE const &i)",
				"{",
				"\treturn (o);",
				"}",
				"",
			],
			"description" : "Protection against inclusion loop"
		},
		//-------------------------------------------------------------------------------------------------------------------------------------//
		
		// IFNDEF AUTOFILL --------------------------------------------------------------------------------------------------------------------//
			"#ifndef FILENAME_HPP" : {
				"prefix" : "#ifndef",
				"body" : [
					"#ifndef $1_HPP",
					"# define $1_HPP",
					"",
					"$2",
					"",
					"#endif",
					"",
				],
				"description" : "Protection against inclusion loop"
			},
		//-------------------------------------------------------------------------------------------------------------------------------------//
		}